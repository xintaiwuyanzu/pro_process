<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionEntity">

    <resultMap id="processDefinitionResultMapFix"
               type="com.dr.process.camunda.command.process.definition.extend.ProcessDefinitionEntityWithExtend">
        <id property="id" column="ID_" jdbcType="VARCHAR"/>
        <result property="revision" column="REV_"/>
        <result property="category" column="CATEGORY_"/>
        <result property="name" column="NAME_"/>
        <result property="key" column="KEY_" jdbcType="VARCHAR"/>
        <result property="version" column="VERSION_" jdbcType="INTEGER"/>
        <result property="deploymentId" column="DEPLOYMENT_ID_" jdbcType="VARCHAR"/>
        <result property="resourceName" column="RESOURCE_NAME_" jdbcType="VARCHAR"/>
        <result property="diagramResourceName" column="DGRM_RESOURCE_NAME_" jdbcType="VARCHAR"/>
        <result property="hasStartFormKey" column="HAS_START_FORM_KEY_" jdbcType="BOOLEAN"/>
        <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER"/>
        <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR"/>
        <result property="versionTag" column="VERSION_TAG_" jdbcType="VARCHAR"/>
        <result property="historyTimeToLive" column="HISTORY_TTL_" jdbcType="INTEGER"/>
        <result property="isStartableInTasklist" column="STARTABLE_" jdbcType="BOOLEAN"/>
        <result property="processType" column="processType" jdbcType="VARCHAR"/>
    </resultMap>
    <!--条件查询方法-->
    <select id="selectProcessDefinitionsByQueryCriteriaFix"
            parameterType="com.dr.process.camunda.command.process.definition.AbstractGetProcessQueryCmd$ProcessDefinitionQueryImplWithExtend"
            resultMap="processDefinitionResultMap">
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
        ${limitBefore}
        select ${distinct} RES.*,EXT.processType as processType
        ${limitBetween}
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.orderBySelection"/>
        <include refid="selectProcessDefinitionsByQueryCriteriaSqlFix"/>
        ${orderBy}
        ${limitAfter}
    </select>
    <!--统计查询方法-->
    <select id="selectProcessDefinitionCountByQueryCriteriaFix"
            parameterType="com.dr.process.camunda.command.process.definition.AbstractGetProcessQueryCmd$ProcessDefinitionQueryImplWithExtend"
            resultType="long">
        ${countDistinctBeforeStart} RES.ID_ ${countDistinctBeforeEnd}
        <include refid="selectProcessDefinitionsByQueryCriteriaSqlFix"/>
        ${countDistinctAfterEnd}
    </select>

    <!--所有扩展语句都放在-->
    <!--自定义连表查询sql语句-->
    <sql id="tableJoin">
        inner join ${prefix}ACT_RE_PROCODEF_EXT EXT on RES.ID_ = EXT.id
    </sql>
    <sql id="queryExtend">
        <!--流程类型模糊查询-->
        <if test="processTypeLike!=null">
            and EXT.processType like concat('%', #{ processTypeLike },'%')
        </if>
    </sql>


    <!--下面所有代码都是从代码包里面复制出来的，版本更新后需要更新这里面的代码-->
    <sql id="selectProcessDefinitionsByQueryCriteriaSqlFix">
        from ${prefix}ACT_RE_PROCDEF RES
        <include refid="tableJoin"/>
        <if test="eventSubscriptionType != null">
            inner join ${prefix}ACT_RU_EVENT_SUBSCR EVT on RES.ID_ = EVT.CONFIGURATION_
        </if>
        <if test="incidentType != null || incidentId != null || incidentMessage != null || incidentMessageLike != null">
            inner join ${prefix}ACT_RU_INCIDENT INC on RES.ID_ = INC.PROC_DEF_ID_
        </if>
        <if test="latest">
            inner join
            (select KEY_, TENANT_ID_, max(VERSION_) as MAX_VERSION
            from ${prefix}ACT_RE_PROCDEF
            <where>
                <if test="key != null">
                    KEY_ = #{key}
                </if>
            </where>
            group by TENANT_ID_, KEY_) VER
            on RES.KEY_ = VER.KEY_
        </if>
        <if test="shouldJoinDeploymentTable">
            inner join ${prefix}ACT_RE_DEPLOYMENT DEP on RES.DEPLOYMENT_ID_ = DEP.ID_
        </if>

        <if test="authCheck.shouldPerformAuthorizatioCheck &amp;&amp; !authCheck.revokeAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
            <include
                    refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheckJoinWithoutOnClause"/>
            AUTH ON (AUTH.RESOURCE_ID_ in (RES.ID_, RES.KEY_, '*'))

            <if test="startablePermissionCheck">
                <bind name="atomicChecks" value="processDefinitionCreatePermissionChecks"/>
                <include
                        refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheckJoinWithoutOnClauseWithBinding"/>
                AUTH1 ON (AUTH1.RESOURCE_ID_ in (RES.KEY_, '*'))
            </if>
        </if>

        <where>
            <if test="id != null">
                RES.ID_ = #{id}
            </if>
            <if test="ids != null &amp;&amp; ids.length > 0">
                and RES.ID_ in
                <foreach item="item" index="index" collection="ids"
                         open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="keys != null &amp;&amp; keys.length > 0">
                and RES.KEY_ in
                <foreach item="item" index="index" collection="keys"
                         open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="category != null">
                and RES.CATEGORY_ = #{category}
            </if>
            <if test="categoryLike != null">
                and RES.CATEGORY_ like #{categoryLike} ESCAPE ${escapeChar}
            </if>
            <if test="name != null">
                and RES.NAME_ = #{name}
            </if>
            <if test="nameLike != null">
                <!-- based on CAM-8014 compare name like case-insensitive -->
                and UPPER(RES.NAME_) like UPPER(#{nameLike}) ESCAPE ${escapeChar}
            </if>
            <if test="key != null">
                and RES.KEY_ = #{key}
            </if>
            <if test="keyLike != null">
                and RES.KEY_ like #{keyLike} ESCAPE ${escapeChar}
            </if>
            <if test="resourceName != null">
                and RES.RESOURCE_NAME_ = #{resourceName}
            </if>
            <if test="resourceNameLike != null">
                and RES.RESOURCE_NAME_ like #{resourceNameLike} ESCAPE ${escapeChar}
            </if>
            <if test="version != null">
                and RES.VERSION_ = #{version}
            </if>
            <if test="deploymentId != null">
                and RES.DEPLOYMENT_ID_ = #{deploymentId}
            </if>
            <if test="deployedAfter != null">
                and DEP.DEPLOY_TIME_ &gt; #{deployedAfter}
            </if>
            <if test="deployedAt != null">
                and DEP.DEPLOY_TIME_ = #{deployedAt}
            </if>
            <if test="latest">
                and RES.VERSION_ = VER.MAX_VERSION and
                (RES.TENANT_ID_ = VER.TENANT_ID_ or (RES.TENANT_ID_ is null and VER.TENANT_ID_ is null))
            </if>
            <if test="suspensionState != null">
                and (RES.SUSPENSION_STATE_ = #{suspensionState.stateCode})
            </if>
            <if test="eventSubscriptionType != null">
                and (EVT.EVENT_TYPE_ = #{eventSubscriptionType} and EVT.EVENT_NAME_ = #{eventSubscriptionName})
            </if>
            <if test="authorizationUserId != null">
                AND (exists (select ID_ from ${prefix} ACT_RU_IDENTITYLINK IDN where IDN.PROC_DEF_ID_ = RES.ID_ and
                IDN.USER_ID_ = #{authorizationUserId})
                <if test="candidateGroups != null &amp;&amp; candidateGroups.size > 0">
                    OR exists (select IDN.ID_ from ${prefix} ACT_RU_IDENTITYLINK IDN where IDN.PROC_DEF_ID_ = RES.ID_
                    and IDN.GROUP_ID_ in
                    <foreach item="group" index="index" collection="candidateGroups" open="(" separator="," close=")">
                        #{group, jdbcType=VARCHAR}</foreach>)
                </if>
                )
            </if>
            <if test="incidentType != null">
                and INC.INCIDENT_TYPE_ = #{incidentType}
            </if>
            <if test="incidentId != null">
                and INC.ID_ = #{incidentId}
            </if>
            <if test="incidentMessage != null">
                and INC.INCIDENT_MSG_ = #{incidentMessage}
            </if>
            <if test="incidentMessageLike != null">
                and INC.INCIDENT_MSG_ like #{incidentMessageLike} ESCAPE ${escapeChar}
            </if>
            <if test="isTenantIdSet">
                <if test="tenantIds != null &amp;&amp; tenantIds.length > 0">
                    and ( RES.TENANT_ID_ in
                    <foreach item="tenantId" index="index" collection="tenantIds"
                             open="(" separator="," close=")">
                        #{tenantId}
                    </foreach>
                    <if test="includeDefinitionsWithoutTenantId">
                        or RES.TENANT_ID_ is null
                    </if>
                    )
                </if>
                <if test="tenantIds == null">
                    and RES.TENANT_ID_ is null
                </if>
            </if>
            <if test="isVersionTagSet">
                <if test="versionTag != null">
                    and RES.VERSION_TAG_ = #{versionTag}
                </if>
                <if test="versionTag == null">
                    and RES.VERSION_TAG_ is null
                </if>
            </if>
            <if test="versionTagLike != null">
                and RES.VERSION_TAG_ like #{versionTagLike} ESCAPE ${escapeChar}
            </if>
            <if test="isStartableInTasklist">
                and RES.STARTABLE_ = ${trueConstant}
            </if>
            <if test="isNotStartableInTasklist">
                and RES.STARTABLE_ = ${falseConstant}
            </if>

            <if test="authCheck.shouldPerformAuthorizatioCheck &amp;&amp; !authCheck.revokeAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null &amp;&amp; startablePermissionCheck">
                AND AUTH1.RESOURCE_ID_ IS NOT NULL
            </if>
            <include refid="queryExtend"/>
            <include
                    refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.queryAuthorizationCheck"/>
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck"/>
        </where>
    </sql>
</mapper>
